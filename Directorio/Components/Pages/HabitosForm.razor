@page "/habitos/nueva"
@page "/habitos/editar/{Id:int}"
@inject NavigationManager _navigationManager
@inject IRepositorioHabitos _repositorioHabitos
<PageTitle>Habitos</PageTitle>
<h3>@_mensaje Habitos</h3>

<EditForm Model="_habito" FormName="frmClasificacion" OnValidSubmit="GuardarPersona">
    <DataAnnotationsValidator />
    @*     <ValidationSummary /> *@
    <div class="mb-3">
        <label for="nombre" class="form-label">Nombre</label>
        <InputText id="nombre" class="form-control" @bind-Value="_habito.Nombre" />
        <ValidationMessage For="() => _habito.Nombre" />
    </div>
    <div class="mb-3">
        <button type="submit" class="btn btn-primary">Guardar</button>
        <a type="button" class="btn btn-danger" href="/habitos">Cancelar</a>
    </div>

</EditForm>

@code {
    [Parameter]
    public int Id { get; set; } // Propiedad para recibir el ID de la URL
    private Habito _habito = new Habito(); // Inicializa la nueva persona
    private string _mensaje = "Nueva ";


    protected override async Task OnInitializedAsync()
    {
        if (Id > 0) // Si el ID es mayor que 0, significa que estamos editando
        {
            _mensaje = "Editar ";
            _habito = await _repositorioHabitos.Get(Id); // Obtiene la persona por ID
        }
    }


    private async Task GuardarPersona()
    {
        if (Id > 0) // Si el ID es mayor que 0, significa que estamos editando
        {
            await _repositorioHabitos.Update(_habito); // Actualiza la persona
        }
        else // Si el ID es 0, significa que estamos creando una nueva persona
        {
            await _repositorioHabitos.Add(_habito); // Crea la nueva persona
        }
        _navigationManager.NavigateTo("/habitos"); // Redirige a la lista de personas después de guardar
    }

}
